#  John Goettsche
#  under the direction of Clinton Jeffery
#  University of Idaho

package productionRules

import Clock
import DAO
import Objects
import statesSLR

procedure createProductionRules(
         fileName,
         arguments,
         rawGrammar, 
         nonTerminalCheckSet, 
         nonTerminalList, 
         terminalCheckSet, 
         terminalsSet)
#  from the rawGrammar, nonTerminalCheckSet, nonTerminalSet,
#  terminalCheckSet and Terminals it produces the grammars and
#  stores them in their respective nonTerminal, then procedes to 
#  produce a report of the grammar

   local 
      grammar, 
      output,
      outfile,
      outfileName

	write("Creating Production Rules...\n")
   grammar := makeProductionRules(
         rawGrammar, 
         nonTerminalCheckSet, 
         nonTerminalList, 
         terminalCheckSet, 
         terminalsSet)

   #print tokens
	every nt := !nonTerminalList do write(nt.getTxt())
   if *arguments > 0 then if member(arguments, "p") then {
		if member(arguments, "o") then {
			DAO::writeListToFile(fileName, nonTerminalList, "production")
		} 
      write("\nCreated a grammar with the following production rules:")
      every output := !nonTerminalList do {
         every write("\t" || output.getTxt())
      }
		Clock::printTime()
      write("\n(press ENTER to continue)\n")
      getch()
   }
   
   statesSLR::createStates(fileName, arguments, nonTerminalList, terminalsSet, terminalsSet)  
end

procedure makeProductionRules(
      rawGrammar, 
      nonTerminalCheckSet, 
      nonTerminalList, 
      terminalCheckSet, 
      terminalsList)
#  generates grammar rules from the rawGrammar, 
#  nonTerminalCheckSet, nonTerminalSet, terminalCheckSet
#  terminalsSet and populates each rule with the appropriate
#  terminal or nonTerminal

   local 
      x, 
      nonTerm, 
      nonTerminal,
      productionRule, 
      term
      
   x := 1
   while rawGrammar[x] do {   
      if member(nonTerminalCheckSet, rawGrammar[x]) then {#is a non terminal?
         if rawGrammar[x + 1] == ":" then { #is a grammar rule ?
            every nonTerm := !nonTerminalList do {
               if \nonTerm then {
                  if nonTerm.token == rawGrammar[x] then { 
                     nonTerminal := nonTerm
                     productionRule := Objects::Production()
                     x := x + 1
                  }
               }
            }
         } else {
            every nonTerm := !nonTerminalList do {
               if \nonTerm then {
                  if nonTerm.token == rawGrammar[x] then {
                     productionRule.addVariable(nonTerm)
                  }
               }
            }
         }
      }#end non terminal

      #is a terminal?
      if member(terminalCheckSet, rawGrammar[x]) & rawGrammar[x] ~== "|" then {
         every term := !terminalsList do {
            if \term then {
               if term.token == rawGrammar[x] then productionRule.addVariable(term)
            }
         }
      }

      #is an or?
      if rawGrammar[x] == "|" then {
			if productionRule === errorFree(productionRule) then {
				nonTerminal.addProductionRule(productionRule)
			}
         productionRule := Objects::Production()
      }

      #is end of nonTerminal?
      if rawGrammar[x] == ";" then {
			if productionRule === errorFree(productionRule) then {
				nonTerminal.addProductionRule(productionRule)
			}
         if rawGrammar[x + 1] == "|" then {
            productionRule := Objects::Production()
            x +:= 1
         }
      }
      x +:= 1
   }
end

procedure errorFree(productionRule)
	local
		thisVariable,
		e
		
	e := 0
	every thisVariable := !productionRule.variables do
		if thisVariable.token == "error" then e := 1
	if e = 0 then return productionRule
#	else return &null
end
