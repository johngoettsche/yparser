#	John Goettsche
#	under the direction of Clinton Jeffery
#	University of Idaho

#grammars.icn
package grammars

import DAO
import Objects
import productionRules

procedure createNonTerminals(fileName)  
#	from the rawGrammar it creates the NonTerminals and
#	procedes the createTerminals procedure

	#create nonTerminals
	local 
		nonTerminal, 
		nonTerminalWordList, 
		outfile,
		outfileName
   
	write("Creating Non-Terminals...\n")
	nonTerminalList := []
	thisFileName := fileName || ".nt"
	nonTerminalWordList := DAO::getWordListFromFile(thisFileName)
	every put(nonTerminalList, makeNonTerminalSet(nonTerminalWordList))

	return nonTerminalList
end

procedure createTerminals(fileName)
#procedure createTerminals(fileName, arguments, rawGrammar, nonTerminalCheckSet, nonTerminalList, terminalCheckSet, terminalList)
#	from the rawGrammar, nonTerminalCheckSet and nonTerminalSet it
#	produces the terminals and procedes to the creaeGrammar procedure

	#create terminals
	local 
		terminalList,
		terminalWordList
      
	write("Creating Terminals...\n")
	terminalList := []
	thisFileName := fileName || ".t"
	terminalWordList := DAO::getWordListFromFile(thisFileName)
	every put(terminalList, makeTerminalList(fileName, terminalWordList))

	return terminalList
end

procedure makeNonTerminalSet(nonTerminalWordList)
#	creates and suspends each NonTerminal in the nonTerminalWords
#	in the order they appear in the grammar
	local 
		x, 
		token, 
		thisNonTerminal
	
	every token := !nonTerminalWordList do {
		thisNonTerminal := Objects::NonTerminal()
		thisNonTerminal.token := token
		suspend thisNonTerminal
	}
end

procedure makeTerminalList(fileName, terminalList)
#	creates and susends each Terminal in the terminalsList
	local 
		token, 
		thisTerminal,
		pattern,
		thisPattern
	
	tokenFileName := fileName || ".tk"
	every token := !terminalList do {
		thisTerminal := Objects::Terminal("terminal")	
		thisTerminal.token := token
		tokenfile := open(tokenFileName, "r") | stop("ERROR: trouble reading " || fileN)
		pattern := getPattern(tokenfile, token)
		close(tokenfile)
		thisTerminal.pattern := pattern
		suspend thisTerminal
	}
end

procedure getPattern(tkfile, token)
	pattern := "#"
	wordDef := &letters++&digits++'_*/%{}|:;+-$#@!&()[]<>,.~`'	
	every line := !tkfile do {
		line ? while tab(upto(wordDef)) do {
			tokenString := tab(many(wordDef))
			tab(upto(wordDef))
			thisPattern := tab(many(wordDef))
			if *thisPattern < 1 then thisPattern := "#"
			if tokenString == token then {
				pattern := thisPattern
			}
		}
	}
	return pattern
end
